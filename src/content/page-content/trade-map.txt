

*The code for this project can be viewed on [Github](https://github.com/mego99/trade-map).*

*The live version is hosted [here](https://mego99.github.io/trade-map/) by Github Pages.*

My current project with D3 is a combination of a few of my favorite things: maps, data, and international relations! 

### Part One: Project Design
Inspired by the current political climate of our world, my goal for this project was to display the interconnectedness of the world using some sort of map-based data visualization. Trade, one of the most important sources of interaction between nations, came to mind immediately. 

Data about trade is generally widely available and is usually published by governmental statistics agencies. Even when looking solely at international trade, there is a wealth of information out there—volume by industry, percent change, top trading partners, etc. To focus the visualization on a general, quick-look overview, I decided to only play with the top five export and import destinations/origins for each country in the world. For example, Japan’s top five export destinations in 2016 were the US, China, South Korea, Taiwan, and Thailand; its top five import origins were China, the US, Australia, South Korea, and Taiwan. 

In hindsight, this was quite the ambitious goal. Since no such dataset existed, I had to manually compile the data using a conglomerate of sources. Given that there are 193 UN member countries and 10 data points for each country, I would be collecting a total of 1930 data points! 

### Part Two: Collecting Data
Collecting the data was by far the most needlessly difficult step. Retrospectively, it could have been done much more efficiently through scripting with Python or something. A lot of the process involved working with unwieldy government-hosted APIs or flash-based data download interfaces (???). In general, there was a lot of manual maneuvering involved that I think I’ll try to cut down next time I attempt something like this. 

The process of looking for and compiling data led me to many questions that I had not considered:

* How would I determine what regions and territories to use? One option was to the 193 countries officially recognized by the UN list. Would I just 

* What year would I use? The availability of data in general and the frequency at which data is collected differs heavily by country. Would I try to get data collected in the same year across every country? Or should I simply take the most recent data available per each individual country? 


### Part Three: Coding Up the Visualization
Major regret for this section: even attempting to use D3 at all. I think my new rule of thumb is that any data project that uses more than 100 data points should head straight to Canvas.js. I ended up only showing the top import/export partner for each country, not the top 5.

The main feature of the map are the connecting lines. They are achieved by the following code:

	flowLayer.append("g")
	        .selectAll(".flow")
	            .data(flow)
	        .enter()
	        .filter(function(d){
	          if ((+d.flowRank == 1 ) ) { return d}
	        })
	          .append("path")
	            .attr("d",function(d) {
	              let country = getPoints(d);
	              var x1 = country[0],
	              y1 = country[1],
	              x2 = country[2],
	              y2 = country[3],
	              text = "M"+x1+","+y1+" L "+x2+","+y2+" Z";
	              let flowType;
	              (+d.flowType == 0) ? flowType = "export" : flowType = "import";
	              let flowVb;
	              (flowType == "export") ? flowVb = "to" : flowVb = "from ";
	              return text;
	            });

The biggest problem, which I still haven’t exactly figured out, is how to shade the lines correctly. I envisioned that the lines, drawn in a gradient from yellow(export) to blue(import), would clearly show the direction of the trade flow. Since the lines are drawn as SVG elements by D3, the gradient would have to be transformed by the gradientTransform attribute of the LinearGradient element, using a computed rotation angle. This proved to be quite difficult—the [SVG documentation](https://www.w3.org/TR/SVG/pservers.html#LinearGradientElementGradientTransformAttribute), in my opinion, barely explained how the rotation works. After some more investigating, I’ll be back with an explanation.

Here’s what the map looks like as of now: 

![](trade-map.png)